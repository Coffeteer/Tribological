df %>%
pivot_wider(
names_from = Environment,
values_from = Environment
)
df_wide <- df %>%
pivot_wider(
names_from = Environment,
values_from = Environment
)
str(df)
df_env1
df_env2 <- df %>%
filter(Environment == 2)
df_env3 <- df %>%
filter(Environment == 3)
df_env1 %>%
inner_join(df_env2, by = c(Subject, Food), suffix = c("Env1", "Env2"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("Env1", "Env2"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
select(-c("Environment_Env1", "Environment_Env2"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
select(-c(Environment_Env1, Environment_Env2))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
select(Environment_Env1, Environment_Env2)
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
select(Food)
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
tidyverse::select(Food)
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
dplyr::select(Food)
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
dplyr::select(-c(Environment_Env1, Environment_Env2))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
dplyr::select(-c(Environment_Env1, Environment_Env2))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("_Env1", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c(" ","_Env2")) %>%
dplyr::select(-c(Environment_Env1, Environment_Env2))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment_Env1, Environment_Env2))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3"))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3))
df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3)) %>%
drop_na()
df_paired <- df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3)) %>%
drop_na()
names(df)
T1_Appear <- sum(df_paired$Appear < df_paired$Appear_Env2)
T2_Appear <- sum(df_paired$Appear < df_paired$Appear_Env3)
T3_Appear <- sum(df_paired$Appear_Env2 < df_paired$Appear_Env3)
T1_Smell <- sum(df_paired$Smell < df_paired$Smell_Env2)
T2_Smell <- sum(df_paired$Smell < df_paired$Smell_Env3)
T3_Smell <- sum(df_paired$Smell_Env2 < df_paired$Smell_Env3)
T1_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env2)
T2_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env3)
T3_Mouthfeel <- sum(df_paired$Mouthfeel_Env2 < df_paired$Mouthfeel_Env3)
T1_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env2)
T2_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env3)
T3_Flavor <- sum(df_paired$Flavor_Env2 < df_paired$Flavor_Env3)
T1_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env2)
T2_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env3)
T3_Prodacc <- sum(df_paired$Prodacc_Env2 < df_paired$Prodacc_Env3)
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")
str(binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t"))
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value
append(p) <-
1
p<- c()
append(p)<-1
df_env1 <- df %>%
filter(Environment == 1)
df_env2 <- df %>%
filter(Environment == 2)
df_env3 <- df %>%
filter(Environment == 3)
df_paired <- df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3)) %>%
drop_na()
T1_Appear <- sum(df_paired$Appear < df_paired$Appear_Env2)
T2_Appear <- sum(df_paired$Appear < df_paired$Appear_Env3)
T3_Appear <- sum(df_paired$Appear_Env2 < df_paired$Appear_Env3)
T1_Smell <- sum(df_paired$Smell < df_paired$Smell_Env2)
T2_Smell <- sum(df_paired$Smell < df_paired$Smell_Env3)
T3_Smell <- sum(df_paired$Smell_Env2 < df_paired$Smell_Env3)
T1_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env2)
T2_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env3)
T3_Mouthfeel <- sum(df_paired$Mouthfeel_Env2 < df_paired$Mouthfeel_Env3)
T1_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env2)
T2_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env3)
T3_Flavor <- sum(df_paired$Flavor_Env2 < df_paired$Flavor_Env3)
T1_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env2)
T2_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env3)
T3_Prodacc <- sum(df_paired$Prodacc_Env2 < df_paired$Prodacc_Env3)
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value
binom.test(T2_Appear, length((df_paired$Appear - df_paired$Appear_Env3)[df_paired$Appear - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
binom.test(T3_Appear, length((df_paired$Appear_Env2 - df_paired$Appear_Env3)[df_paired$Appear_Env2 - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
binom.test(T1_Smell, length((df_paired$Smell - df_paired$Smell_Env2)[df_paired$Smell - df_paired$Smell_Env2 != 0]), alternative= "t")$p.value
binom.test(T2_Smell, length((df_paired$Smell - df_paired$Appear_Env3)[df_paired$Smell - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
binom.test(T3_Smell, length((df_paired$Smell_Env2 - df_paired$Appear_Env3)[df_paired$Smell_Env2 - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
binom.test(T1_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env2)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env2 != 0]), alternative= "t")$p.value
binom.test(T2_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
binom.test(T3_Mouthfeel, length((df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
binom.test(T1_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env2)[df_paired$Flavor - df_paired$Flavor_Env2 != 0]), alternative= "t")$p.value
binom.test(T2_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env3)[df_paired$Flavor - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
binom.test(T3_Flavor, length((df_paired$Flavor_Env2 - df_paired$Flavor_Env3)[df_paired$Flavor_Env2 - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
binom.test(T1_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env2)[df_paired$Prodacc - df_paired$Prodacc_Env2 != 0]), alternative= "t")$p.value
binom.test(T2_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
binom.test(T3_Prodacc, length((df_paired$Prodacc_Env2 - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
append(p,
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value,
binom.test(T2_Appear, length((df_paired$Appear - df_paired$Appear_Env3)[df_paired$Appear - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value,
binom.test(T3_Appear, length((df_paired$Appear_Env2 - df_paired$Appear_Env3)[df_paired$Appear_Env2 - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value,
binom.test(T1_Smell, length((df_paired$Smell - df_paired$Smell_Env2)[df_paired$Smell - df_paired$Smell_Env2 != 0]), alternative= "t")$p.value,
binom.test(T2_Smell, length((df_paired$Smell - df_paired$Appear_Env3)[df_paired$Smell - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value,
binom.test(T3_Smell, length((df_paired$Smell_Env2 - df_paired$Appear_Env3)[df_paired$Smell_Env2 - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value,
binom.test(T1_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env2)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env2 != 0]), alternative= "t")$p.value,
binom.test(T2_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value,
binom.test(T3_Mouthfeel, length((df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value,
binom.test(T1_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env2)[df_paired$Flavor - df_paired$Flavor_Env2 != 0]), alternative= "t")$p.value,
binom.test(T2_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env3)[df_paired$Flavor - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value,
binom.test(T3_Flavor, length((df_paired$Flavor_Env2 - df_paired$Flavor_Env3)[df_paired$Flavor_Env2 - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value,
binom.test(T1_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env2)[df_paired$Prodacc - df_paired$Prodacc_Env2 != 0]), alternative= "t")$p.value,
binom.test(T2_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value,
binom.test(T3_Prodacc, length((df_paired$Prodacc_Env2 - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
)
append(p,
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value),
append(p,
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value)
p
append(
binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value, p)
p
p[1] <- binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value
df_env1 <- df %>%
filter(Environment == 1)
df_env2 <- df %>%
filter(Environment == 2)
df_env3 <- df %>%
filter(Environment == 3)
df_paired <- df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3)) %>%
drop_na()
T1_Appear <- sum(df_paired$Appear < df_paired$Appear_Env2)
T2_Appear <- sum(df_paired$Appear < df_paired$Appear_Env3)
T3_Appear <- sum(df_paired$Appear_Env2 < df_paired$Appear_Env3)
T1_Smell <- sum(df_paired$Smell < df_paired$Smell_Env2)
T2_Smell <- sum(df_paired$Smell < df_paired$Smell_Env3)
T3_Smell <- sum(df_paired$Smell_Env2 < df_paired$Smell_Env3)
T1_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env2)
T2_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env3)
T3_Mouthfeel <- sum(df_paired$Mouthfeel_Env2 < df_paired$Mouthfeel_Env3)
T1_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env2)
T2_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env3)
T3_Flavor <- sum(df_paired$Flavor_Env2 < df_paired$Flavor_Env3)
T1_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env2)
T2_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env3)
T3_Prodacc <- sum(df_paired$Prodacc_Env2 < df_paired$Prodacc_Env3)
p<- c()
p[1] <- binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value
p[2] <- binom.test(T2_Appear, length((df_paired$Appear - df_paired$Appear_Env3)[df_paired$Appear - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
p[3] <- binom.test(T3_Appear, length((df_paired$Appear_Env2 - df_paired$Appear_Env3)[df_paired$Appear_Env2 - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
p[4] <- binom.test(T1_Smell, length((df_paired$Smell - df_paired$Smell_Env2)[df_paired$Smell - df_paired$Smell_Env2 != 0]), alternative= "t")$p.value
p[5] <- binom.test(T2_Smell, length((df_paired$Smell - df_paired$Appear_Env3)[df_paired$Smell - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
p[6] <- binom.test(T3_Smell, length((df_paired$Smell_Env2 - df_paired$Appear_Env3)[df_paired$Smell_Env2 - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
p[7] <- binom.test(T1_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env2)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env2 != 0]), alternative= "t")$p.value
p[8] <- binom.test(T2_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
p[9] <- binom.test(T3_Mouthfeel, length((df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
p[10] <- binom.test(T1_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env2)[df_paired$Flavor - df_paired$Flavor_Env2 != 0]), alternative= "t")$p.value
p[11] <- binom.test(T2_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env3)[df_paired$Flavor - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
p[12] <- binom.test(T3_Flavor, length((df_paired$Flavor_Env2 - df_paired$Flavor_Env3)[df_paired$Flavor_Env2 - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
p[13] <- binom.test(T1_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env2)[df_paired$Prodacc - df_paired$Prodacc_Env2 != 0]), alternative= "t")$p.value
p[14] <- binom.test(T2_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
p[15] <- binom.test(T3_Prodacc, length((df_paired$Prodacc_Env2 - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
p.adjust(p, method = c("fdr"), n = length(p))
p<- data.frame(Test = NA, p_value = NA)
df_env1 <- df %>%
filter(Environment == 1)
df_env2 <- df %>%
filter(Environment == 2)
df_env3 <- df %>%
filter(Environment == 3)
df_paired <- df_env1 %>%
inner_join(df_env2, by = c("Subject", "Food"), suffix = c("", "_Env2")) %>%
inner_join(df_env3, by = c("Subject", "Food"), suffix = c("","_Env3")) %>%
dplyr::select(-c(Environment, Environment_Env2, Environment_Env3)) %>%
drop_na()
T1_Appear <- sum(df_paired$Appear < df_paired$Appear_Env2)
T2_Appear <- sum(df_paired$Appear < df_paired$Appear_Env3)
T3_Appear <- sum(df_paired$Appear_Env2 < df_paired$Appear_Env3)
T1_Smell <- sum(df_paired$Smell < df_paired$Smell_Env2)
T2_Smell <- sum(df_paired$Smell < df_paired$Smell_Env3)
T3_Smell <- sum(df_paired$Smell_Env2 < df_paired$Smell_Env3)
T1_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env2)
T2_Mouthfeel <- sum(df_paired$Mouthfeel < df_paired$Mouthfeel_Env3)
T3_Mouthfeel <- sum(df_paired$Mouthfeel_Env2 < df_paired$Mouthfeel_Env3)
T1_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env2)
T2_Flavor <- sum(df_paired$Flavor < df_paired$Flavor_Env3)
T3_Flavor <- sum(df_paired$Flavor_Env2 < df_paired$Flavor_Env3)
T1_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env2)
T2_Prodacc <- sum(df_paired$Prodacc < df_paired$Prodacc_Env3)
T3_Prodacc <- sum(df_paired$Prodacc_Env2 < df_paired$Prodacc_Env3)
p<- data.frame(Test = NA, p_value = NA)
p[1,2] <- binom.test(T1_Appear, length((df_paired$Appear - df_paired$Appear_Env2)[df_paired$Appear - df_paired$Appear_Env2 != 0]), alternative= "t")$p.value
p[2,2] <- binom.test(T2_Appear, length((df_paired$Appear - df_paired$Appear_Env3)[df_paired$Appear - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
p[3,2] <- binom.test(T3_Appear, length((df_paired$Appear_Env2 - df_paired$Appear_Env3)[df_paired$Appear_Env2 - df_paired$Appear_Env3 != 0]), alternative= "t")$p.value
p[4,2] <- binom.test(T1_Smell, length((df_paired$Smell - df_paired$Smell_Env2)[df_paired$Smell - df_paired$Smell_Env2 != 0]), alternative= "t")$p.value
p[5,2] <- binom.test(T2_Smell, length((df_paired$Smell - df_paired$Appear_Env3)[df_paired$Smell - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
p[6,2] <- binom.test(T3_Smell, length((df_paired$Smell_Env2 - df_paired$Appear_Env3)[df_paired$Smell_Env2 - df_paired$Smell_Env3 != 0]), alternative= "t")$p.value
p[7,2] <- binom.test(T1_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env2)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env2 != 0]), alternative= "t")$p.value
p[8,2] <- binom.test(T2_Mouthfeel, length((df_paired$Mouthfeel - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
p[9,2] <- binom.test(T3_Mouthfeel, length((df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3)[df_paired$Mouthfeel_Env2 - df_paired$Mouthfeel_Env3 != 0]), alternative= "t")$p.value
p[10,2] <- binom.test(T1_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env2)[df_paired$Flavor - df_paired$Flavor_Env2 != 0]), alternative= "t")$p.value
p[11,2] <- binom.test(T2_Flavor, length((df_paired$Flavor - df_paired$Flavor_Env3)[df_paired$Flavor - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
p[12,2] <- binom.test(T3_Flavor, length((df_paired$Flavor_Env2 - df_paired$Flavor_Env3)[df_paired$Flavor_Env2 - df_paired$Flavor_Env3 != 0]), alternative= "t")$p.value
p[13,2] <- binom.test(T1_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env2)[df_paired$Prodacc - df_paired$Prodacc_Env2 != 0]), alternative= "t")$p.value
p[14,2] <- binom.test(T2_Prodacc, length((df_paired$Prodacc - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
p[15,2] <- binom.test(T3_Prodacc, length((df_paired$Prodacc_Env2 - df_paired$Prodacc_Env3)[df_paired$Prodacc - df_paired$Prodacc_Env3 != 0]), alternative= "t")$p.value
p$Adjusted_pvalue <- p.adjust(p$p_value, method = c("fdr"), n = length(p$p_value))
p
p[1,1] <- "Appearance, Control vs. Lake"
p[2,1] <- "Appearance, Control vs. Hospital"
p[3,1] <- "Appearance, Lake vs. Hospital"
p[4,1] <- "Smell, Control vs. Lake"
p[5,1] <- "Smell, Control vs. Hospital"
p[6,1] <- "Smell, Lake vs. Hospital"
p[7,1] <- "Mouthfeel, Control vs. Lake"
p[8,1] <- "Mouthfeel, Control vs. Hospital"
p[9,1] <- "Mouthfeel, Lake vs. Hospital"
p[10,1] <- "Flavor, Control vs. Lake"
p[11,1] <- "Flavor, Control vs. Hospital"
p[12,1] <- "Flavor, Lake vs. Hospital"
p[13,1] <- "Prodacc, Control vs. Lake"
p[14,1] <- "Prodacc, Control vs. Hospital"
p[15,1] <- "Prodacc, Lake vs. Hospital"
p
p %>%
filter(Adjusted_pvalue < .05)
head(df)
ggplot(df, aes(Environment, Appear))+
geom_boxplot()
ggplot(df, aes(Environment, Smell))+
geom_boxplot()
ggplot(df, aes(Environment, Mouthfeel))+
geom_boxplot()
ggplot(df, aes(Environment, Prodacc))+
geom_boxplot()
ggplot(df, aes(Environment, Flavor))+
geom_boxplot()
appear <- ggplot(df, aes(Environment, Appear))+
geom_boxplot()
smell <- ggplot(df, aes(Environment, Smell))+
geom_boxplot()
mouth <- ggplot(df, aes(Environment, Mouthfeel))+
geom_boxplot()
flavor <- ggplot(df, aes(Environment, Prodacc))+
geom_boxplot()
product<- ggplot(df, aes(Environment, Flavor))+
geom_boxplot()
grid.arrange(appear,smell,mouth, flavor, product, nrow=2)
appear <- ggplot(df, aes(Environment, Appear))+
geom_boxplot()
smell <- ggplot(df, aes(Environment, Smell))+
geom_boxplot()
mouth <- ggplot(df, aes(Environment, Mouthfeel))+
geom_boxplot()
flavor <- ggplot(df, aes(Environment, Prodacc))+
geom_boxplot()
product<- ggplot(df, aes(Environment, Flavor))+
geom_boxplot()
grid.arrange(appear,smell,mouth, flavor, product, nrow=2)
ggplot(df, aes(Environment, Appear))+
geom_jitter()
appear <- ggplot(df, aes(Environment, Appear))+
geom_boxplot()
smell <- ggplot(df, aes(Environment, Smell))+
geom_boxplot()
mouth <- ggplot(df, aes(Environment, Mouthfeel))+
geom_boxplot()
flavor <- ggplot(df, aes(Environment, Prodacc))+
geom_boxplot()
product<- ggplot(df, aes(Environment, Flavor))+
geom_boxplot()
grid.arrange(appear,smell,mouth, flavor, product, nrow=2)
df <- as_tibble(read_xlsx("Links and Nodes for Sankeyu.xlsx", sheet = "Sheet2")) %>%
mutate(weight = as.integer(round(weight))) %>%
filter(weight != 0)
hchart(df, "sankey", name = "CF") |>
hc_yAxis(title = list(text = "Cases")) |>
hc_title(text = "Annual Cash Flow Plan") |>
hc_subtitle(text = "Year: 2024") |>
hc_add_theme(hc_theme_db())
library(tidyverse)
library(scales)
library(plotly)
library(zoo)
library(networkD3)
library(htmlwidgets)
library(highcharter)
library(readxl) #Default Annual Growth Assumption (Averaged and Inflation Adjusted)
Coast = 0.05
contribute <- function(df_col, amnt = 0, rate = Coast, start = 1, stop =(length(df_col)-1), initial = FALSE) {
if(amnt == 0 & rate == Coast & initial == FALSE) {
return(df_col)
}
for(i in start:stop) {
df_col[i+1] = df_col[i] + df_col[i] * rate + amnt
}
if(stop < (length(df_col)-1)) {
for(i in stop:(length(df_col)-1)) {
df_col[i+1] = df_col[i] + df_col[i] * Coast
}
}
return(df_col)
}
financial_window_int <- function(start = 2023, stop = 2063,
RIRA_cont = 0,
GenInv_cont = 0,
RTSP_cont = 0,
W529_cont = 0,
RIRA_rate = Coast,
GenInv_rate = Coast,
RTSP_rate = Coast,
W529_rate = Coast,
plot = FALSE) {
Funds <- data.frame(Year = seq(2023, 2064, 1),
RIRA = 38500,
GenInv = 160000,
RTSP = 155000,
W529 = 69000
)
options(scipen = 100) # Suppress Scientific notation
# Name of the column to search in
target_column <- "Year"
# Use which() to find the row indices
stop <- which(Funds[, target_column] == stop)
start <- which(Funds[, target_column] == start)
# generate new values for window
Funds<- Funds %>%
mutate(RIRA = contribute(RIRA, RIRA_cont, RIRA_rate, start, stop, initial= TRUE),
GenInv = contribute(GenInv, GenInv_cont, GenInv_rate, start, stop, initial = TRUE),
RTSP = contribute(RTSP, RTSP_cont, RTSP_rate, start, stop, initial = TRUE),
W529 = contribute(W529, W529_cont, W529_rate, start, stop, initial = TRUE),
Total = RIRA + GenInv + RTSP + W529)
# Get all column names except year for pivoting to long
cols_to_pivot <- dplyr::setdiff(names(Funds), "Year")
#Save the Funds df to the global environment
assign("Funds", Funds, envir = .GlobalEnv)
#Pivot funds to long format for plotting
Funds_long <- Funds %>%
pivot_longer(cols = cols_to_pivot, names_to = "Account", values_to = "value") %>%
mutate(Account = case_when(
Account == "RIRA" ~ "Roth IRA",
Account == "W529" ~ "529 Account",
Account == "GenInv" ~ "General Investing",
Account == "RTSP" ~ "Roth TSP Account"
)) %>%
na.fill(fill = "Total") %>%
as.data.frame() %>%
mutate(Year = as.numeric(Year),
value = as.numeric(value))
if(plot) {
p<-ggplot(Funds_long, aes(x = Year, y = value, color = Account)) +
geom_point(size = 0.8, aes(text = paste("Account: ", Account, "<br>Value: ",
dollar_format(prefix = "$")(value),
"<br>Year: ", Year))) +
geom_line(aes(x = Year, y = value, color = Account))+
scale_y_continuous(labels = dollar_format(prefix = "$"))+
labs(title = "Investment Value over Time", y = "")+
theme_classic()
ggplotly(p, tooltip = c("text"))
}
}
financial_window <- function(Funds,
start,
stop,
RIRA_cont = 0,
GenInv_cont = 0,
RTSP_cont = 0,
W529_cont = 0,
RIRA_rate = Coast,
GenInv_rate = Coast,
RTSP_rate = Coast,
W529_rate = Coast,
plot = FALSE) {
#If contributions are unchanged, set growth rate to 0 since Coast is already accounted for the initialized Funds. If contributions/withdrawals occur, recalculate with Coast or chosen growth rate.
if(RIRA_cont != 0){
RIRA_rate == 0
}
if(GenInv_cont != 0){
GenInv_rate == 0
}
if(RTSP_cont != 0){
RTSP_rate == 0
}
if(W529_cont != 0){
W529_rate == 0
}
# Name of the column to search in
target_column <- "Year"
# Use which() to find the row indices
stop <- which(Funds[, target_column] == stop)
start <- which(Funds[, target_column] == start)
Funds<- Funds %>%
mutate(RIRA = contribute(RIRA, RIRA_cont, RIRA_rate, start, stop), # generate new values for window
GenInv = contribute(GenInv, GenInv_cont, GenInv_rate, start, stop),
RTSP = contribute(RTSP, RTSP_cont, RTSP_rate, start, stop),
W529 = contribute(W529, W529_cont, W529_rate, start, stop),
Total = RIRA + GenInv + RTSP + W529)
cols_to_pivot <- dplyr::setdiff(names(Funds), "Year")
#Save the Funds df to the global environment
assign("Funds", Funds, envir = .GlobalEnv)
Funds_long <- Funds %>%
pivot_longer(cols = cols_to_pivot, names_to = "Account", values_to = "value") %>%
mutate(Account = case_when(
Account == "RIRA" ~ "Roth IRA",
Account == "W529" ~ "529 Account",
Account == "GenInv" ~ "General Investing",
Account == "RTSP" ~ "Roth TSP Account"     )) %>%
na.fill(fill = "Total") %>%      as.data.frame() %>%
mutate(Year = as.numeric(Year),
value = as.numeric(value))
if(plot) {
p<-ggplot(Funds_long, aes(x = Year, y = value, color = Account)) +
geom_point(size = 0.8, aes(text = paste("Account: ", Account,
"<br>Value: ", dollar_format(prefix = "$")(value),
"<br>Year: ", Year))) +
geom_line(aes(x = Year, y = value, color = Account))+
scale_y_continuous(labels = dollar_format(prefix = "$"))+
labs(title = "Investment Value over Time", y = "")+
theme_classic()
ggplotly(p, tooltip = c("text"))
}
}
financial_window_int()
Funds[1,]
financial_window_int()  # Max Retirements with some to 529 and General
financial_window(Funds,
start = 2023,
stop = 2060,
RIRA_cont = 14000,
W529_cont = 7000,
GenInv_cont = 12000,
RTSP_cont = 46000,
plot = FALSE)
# Pay For Wedding and Trip
financial_window(Funds,
start = 2025,
stop = 2026,
GenInv_cont = -49000,
plot = FALSE
)
financial_window(Funds,
start = 2026,
stop = 2060,
GenInv_cont = 12000,
plot = FALSE
)
# Dream Car
# Pay for Major Expense of $60,000 per year for 8 years
financial_window(Funds,
start = 2044,
stop = 2053,
W529_cont = -60000,
plot = FALSE)
# Down PMT for Dream House ($700,000 down payment/fees), ($3,000,000 loan)
financial_window(Funds,
start = 2044,
stop = 2045,
GenInv_cont = -700000,
plot = TRUE)
df <- as_tibble(read_xlsx("Links and Nodes for Sankeyu.xlsx", sheet = "Sheet2")) %>%
mutate(weight = as.integer(round(weight))) %>%
filter(weight != 0)
hchart(df, "sankey", name = "CF") |>
hc_yAxis(title = list(text = "Cases")) |>
hc_title(text = "Annual Cash Flow Plan") |>
hc_subtitle(text = "Year: 2024") |>
hc_add_theme(hc_theme_db())
shiny::runApp('GitHub/Tribological/Tribological_Visuals')
